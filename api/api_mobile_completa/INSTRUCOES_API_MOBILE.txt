================================================================================
                    API MOBILE - SISTEMA DE GEST√ÉO DE EVENTOS
                          Instru√ß√µes de Uso e Teste
================================================================================

1. DADOS DE ACESSO DO SISTEMA
================================================================================

CREDENCIAIS PADR√ÉO (Admin):
  Email: admin@local
  Senha: admin

ENDPOINT DE LOGIN:
  POST http://localhost:3333/api/auth/login

EXEMPLO DE REQUISI√á√ÉO:
  {
    "email": "admin@local",
    "senha": "admin"
  }

RESPOSTA (Token JWT):
  {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "usuario": {
      "id": 1,
      "nome": "Admin",
      "email": "admin@local",
      "role": "gerente"
    }
  }

ROLES DISPON√çVEIS:
  - gerente: Acesso total ao sistema
  - funcionario: Acesso a pedidos, faturas e pagamentos
  - cliente: Acesso apenas aos seus dados
  - fotografo: Acesso a eventos e fotos

================================================================================

2. ESTRUTURA DO PROJETO
================================================================================

api_mobile/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth.js              (Autentica√ß√£o JWT)
‚îÇ   ‚îú‚îÄ‚îÄ server.js                (Servidor principal da API)
‚îÇ   ‚îî‚îÄ‚îÄ package.json             (Depend√™ncias)
‚îú‚îÄ‚îÄ sistema/
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ db.js                (Configura√ß√£o do banco de dados)
‚îÇ   ‚îú‚îÄ‚îÄ uploads/                 (Diret√≥rio para comprovantes)
‚îÇ   ‚îî‚îÄ‚îÄ data.db                  (Banco de dados SQLite)
‚îú‚îÄ‚îÄ _DOCS/
‚îÇ   ‚îî‚îÄ‚îÄ API_DOCUMENTACAO.md      (Documenta√ß√£o completa)
‚îú‚îÄ‚îÄ _BD/
‚îÇ   ‚îî‚îÄ‚îÄ schema.sql               (Script SQL)
‚îî‚îÄ‚îÄ integracao/
    ‚îî‚îÄ‚îÄ (M√≥dulos de integra√ß√£o externa)

================================================================================

3. COMO TESTAR A API
================================================================================

PASSO 1: Instalar Depend√™ncias
  cd api/
  npm install

PASSO 2: Iniciar o Servidor
  npm start
  
  Voc√™ ver√°:
  ‚úÖ API Mobile rodando em http://localhost:3333
  üìö Documenta√ß√£o: http://localhost:3333/api/docs
  üîç Health Check: http://localhost:3333/api/health

PASSO 3: Testar com Insomnia ou Postman

  3.1. Fazer Login:
    - M√©todo: POST
    - URL: http://localhost:3333/api/auth/login
    - Body (JSON):
      {
        "email": "admin@local",
        "senha": "admin"
      }
    - Copiar o token da resposta

  3.2. Listar Eventos:
    - M√©todo: GET
    - URL: http://localhost:3333/api/eventos
    - Headers:
      Authorization: Bearer <token_copiado>

  3.3. Criar Evento:
    - M√©todo: POST
    - URL: http://localhost:3333/api/eventos
    - Headers:
      Authorization: Bearer <token_copiado>
      Content-Type: application/json
    - Body (JSON):
      {
        "nome": "Casamento Jo√£o e Maria",
        "data_evento": "2025-12-15",
        "hora_evento": "18:00",
        "local": "Sal√£o de Festas Centro"
      }

  3.4. Criar Pedido:
    - M√©todo: POST
    - URL: http://localhost:3333/api/pedidos
    - Headers:
      Authorization: Bearer <token_copiado>
      Content-Type: application/json
    - Body (JSON):
      {
        "cliente_id": 2,
        "evento_id": 1,
        "valor": 5000.00,
        "descricao": "Fotografia do casamento"
      }

  3.5. Criar Fatura:
    - M√©todo: POST
    - URL: http://localhost:3333/api/faturas
    - Headers:
      Authorization: Bearer <token_copiado>
      Content-Type: application/json
    - Body (JSON):
      {
        "pedido_id": 1,
        "valor_total": 5000.00,
        "data_vencimento": "2025-12-20"
      }

  3.6. Registrar Pagamento:
    - M√©todo: POST
    - URL: http://localhost:3333/api/pagamentos
    - Headers:
      Authorization: Bearer <token_copiado>
    - Body (form-data):
      - fatura_id: 1
      - forma_pagamento_id: 4
      - valor_pago: 5000.00
      - comprovante: (arquivo PDF/imagem)

================================================================================

4. DESCRI√á√ÉO DOS ENDPOINTS
================================================================================

AUTENTICA√á√ÉO (Sem JWT)
  POST /api/auth/login
    Autentica um usu√°rio e retorna um token JWT
    Payload: { email, senha }

  POST /api/auth/registrar
    Cria um novo usu√°rio no sistema
    Payload: { nome, email, senha, role }

EVENTOS (Com JWT)
  GET /api/eventos
    Lista todos os eventos
    
  GET /api/eventos/:id
    Obt√©m detalhes de um evento espec√≠fico
    
  POST /api/eventos
    Cria um novo evento (apenas gerentes)
    Payload: { nome, data_evento, hora_evento, local }

PEDIDOS (Com JWT)
  GET /api/pedidos
    Lista pedidos (clientes veem apenas seus pedidos)
    
  GET /api/pedidos/:id
    Obt√©m detalhes de um pedido espec√≠fico
    
  POST /api/pedidos
    Cria um novo pedido
    Payload: { cliente_id, evento_id, valor, descricao }

FATURAS (Com JWT)
  GET /api/faturas
    Lista faturas (clientes veem apenas suas faturas)
    
  GET /api/faturas/:id
    Obt√©m detalhes de uma fatura espec√≠fica
    
  POST /api/faturas
    Cria uma nova fatura a partir de um pedido
    Payload: { pedido_id, valor_total, data_vencimento }

PAGAMENTOS (Com JWT)
  GET /api/pagamentos
    Lista todos os pagamentos
    
  GET /api/pagamentos/:id
    Obt√©m detalhes de um pagamento espec√≠fico
    
  POST /api/pagamentos
    Registra um novo pagamento com comprovante
    Payload (form-data): { fatura_id, forma_pagamento_id, valor_pago, comprovante }

HEALTH CHECK (Sem JWT)
  GET /api/health
    Verifica se a API est√° funcionando

================================================================================

5. FORMAS DE PAGAMENTO DISPON√çVEIS
================================================================================

ID  Nome
1   Dinheiro
2   Cart√£o de Cr√©dito
3   Cart√£o de D√©bito
4   Transfer√™ncia Banc√°ria
5   PIX

================================================================================

6. C√ìDIGOS DE STATUS HTTP
================================================================================

200 OK
  Requisi√ß√£o bem-sucedida

201 Created
  Recurso criado com sucesso

400 Bad Request
  Dados inv√°lidos ou obrigat√≥rios ausentes

401 Unauthorized
  Token ausente ou inv√°lido

403 Forbidden
  Acesso negado (permiss√£o insuficiente)

404 Not Found
  Recurso n√£o encontrado

500 Internal Server Error
  Erro no servidor

================================================================================

7. EXEMPLO DE FLUXO COMPLETO
================================================================================

1. Fazer Login:
   POST /api/auth/login
   { "email": "admin@local", "senha": "admin" }
   ‚úì Recebe token JWT

2. Listar Eventos:
   GET /api/eventos
   Headers: Authorization: Bearer <token>
   ‚úì Recebe lista de eventos

3. Criar Pedido:
   POST /api/pedidos
   Headers: Authorization: Bearer <token>
   { "cliente_id": 2, "evento_id": 1, "valor": 5000.00, "descricao": "..." }
   ‚úì Pedido criado

4. Criar Fatura:
   POST /api/faturas
   Headers: Authorization: Bearer <token>
   { "pedido_id": 1, "valor_total": 5000.00, "data_vencimento": "2025-12-20" }
   ‚úì Fatura criada

5. Registrar Pagamento:
   POST /api/pagamentos
   Headers: Authorization: Bearer <token>
   Form-data: fatura_id=1, forma_pagamento_id=4, valor_pago=5000.00, comprovante=<arquivo>
   ‚úì Pagamento registrado

================================================================================

8. ATUALIZA√á√ïES REALIZADAS
================================================================================

‚úÖ Criada estrutura de pastas conforme solicitado:
   - _DOCS (documenta√ß√£o)
   - _BD (banco de dados)
   - api (API para consumo externo)
   - sistema (c√≥digo do sistema)
   - integracao (m√≥dulos de integra√ß√£o)

‚úÖ Desenvolvida API RESTful com:
   - Autentica√ß√£o JWT (24h de validade)
   - Endpoints para Autentica√ß√£o, Eventos, Pedidos, Faturas e Pagamentos
   - Valida√ß√µes de dados e tratamento de erros
   - Suporte a upload de comprovantes
   - Controle de acesso baseado em roles

‚úÖ Implementadas funcionalidades:
   - Login e registro de usu√°rios
   - CRUD de eventos
   - CRUD de pedidos
   - CRUD de faturas
   - Registro de pagamentos com comprovante
   - Filtros por role (gerente, funcionario, cliente, fotografo)

‚úÖ Documenta√ß√£o completa:
   - Endpoints com exemplos de requisi√ß√£o/resposta
   - Payloads de entrada e sa√≠da
   - C√≥digos de status HTTP
   - Fluxo completo de uso

================================================================================

9. PR√ìXIMOS PASSOS
================================================================================

1. Atualizar o reposit√≥rio GitHub com os novos arquivos
2. Adicionar o professor (@wandersonps) como colaborador
3. Testar todos os endpoints com Insomnia ou Postman
4. Documentar qualquer customiza√ß√£o adicional

================================================================================

10. SUPORTE
================================================================================

Para d√∫vidas sobre a API, consulte:
  - _DOCS/API_DOCUMENTACAO.md (documenta√ß√£o completa)
  - Exemplos de requisi√ß√£o neste arquivo
  - C√≥digo-fonte em api/server.js

================================================================================
                                  FIM DO DOCUMENTO
================================================================================

